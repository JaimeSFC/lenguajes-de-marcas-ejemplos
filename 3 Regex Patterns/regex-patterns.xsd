	<!-- Definición de tipos de elementos y atributos -->
<xs:simpleType name="tipo_codigo_socio">
	<xs:restriction base="xs:integer">
		<xs:minInclusive value="10000"/> 
		<xs:maxInclusive value="99999"/>
	</xs:restriction>
		</xs:simpleType>
	
		<xs:simpleType name="tipo_ISBN_caracteres">
			<xs:restriction base="xs:string">
				<xs:minLength value="6" />
				<xs:maxLength value="13" />
			</xs:restriction>
				</xs:simpleType>
	
		<xs:simpleType name="tipo_booleano">
			<xs:restriction base="xs:string">
				<xs:enumeration value="Si" />
				<xs:enumeration value="No" />
			</xs:restriction>
		</xs:simpleType>
	
	<!-- Alarma Type  -->
	<xs:simpleType name="prioridad">
		<xs:restriction base="xs:string">
			<xs:pattern value="baja|normal|alta" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tono_1a5">
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="1" />
			<xs:maxInclusive value="5" />
			<xs:fractionDigits value="0" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_integer">
		<xs:restriction base="xs:integer">
			<xs:pattern value="^(\d+)$" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_decimal">
		<xs:restriction base="xs:integer">
			<xs:pattern value="^(\d*)[.,](\d+)$" />
		</xs:restriction>
	</xs:simpleType>	

	<xs:simpleType name="tipo_dia">
		<xs:restriction base="xs:integer">
			<xs:pattern value="(0[1-9]|[12]\d|3[01])" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_mes">
		<xs:restriction base="xs:string">
			<xs:pattern value="Enero|Febrero|Marzo|Abril|Mayo|Junio|Julio|Agosto|Septiembre|Octubre|Noviembre|Diciembre" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_anyo">
		<xs:restriction base="xs:short">
			<xs:pattern value="[2020-2199]{4}" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_email">
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,64}" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_tiempo">
		<xs:restriction base="xs:integer">
			<xs:pattern value="/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_dificultad">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Fácil" />
			<xs:enumeration value="Media" />
			<xs:enumeration value="Difícil" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_pais">
		<xs:restriction base="xs:string">
			<!-- <xs:pattern value="[a-zA-Z]{2,}" /> -->
			<xs:pattern value="[A-Z]{2,3}" />
<!-- Comento porque falla la validación en algunos casos, dejo un patron mas amplio 
				<xs:pattern value="^(AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|ES|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW|AFG|ALB|DZA|ASM|AND|AGO|AIA|ATA|ATG|ARG|ARM|ABW|AUS|AUT|AZE|BHS|BHR|BGD|BRB|BLR|BEL|BLZ|BEN|BMU|BTN|BOL|BIH|BWA|BVT|BRA|IOT|VGB|BRN|BGR|BFA|BDI|KHM|CMR|CAN|CPV|CYM|CAF|TCD|CHL|CHN|CXR|CCK|COL|COM|COD|COG|COK|CRI|CIV|CUB|CYP|CZE|DNK|DJI|DMA|DOM|ECU|EGY|SLV|GNQ|ERI|EST|ETH|FRO|FLK|FJI|FIN|FRA|GUF|PYF|ATF|GAB|GMB|GEO|DEU|GHA|GIB|GRC|GRL|GRD|GLP|GUM|GTM|GIN|GNB|GUY|HTI|HMD|VAT|HND|HKG|HRV|HUN|ISL|IND|IDN|IRN|IRQ|IRL|ISR|ITA|JAM|JPN|JOR|KAZ|KEN|KIR|PRK|KOR|KWT|KGZ|LAO|LVA|LBN|LSO|LBR|LBY|LIE|LTU|LUX|MAC|MKD|MDG|MWI|MYS|MDV|MLI|MLT|MHL|MTQ|MRT|MUS|MYT|MEX|FSM|MDA|MCO|MNG|MSR|MAR|MOZ|MMR|NAM|NRU|NPL|ANT|NLD|NCL|NZL|NIC|NER|NGA|NIU|NFK|MNP|NOR|OMN|PAK|PLW|PSE|PAN|PNG|PRY|PER|PHL|PCN|POL|PRT|PRI|QAT|REU|ROU|RUS|RWA|SHN|KNA|LCA|SPM|VCT|WSM|SMR|STP|SAU|SEN|SCG|SYC|SLE|SGP|SVK|SVN|SLB|SOM|ZAF|SGS|ESP|LKA|SDN|SUR|SJM|SWZ|SWE|CHE|SYR|TWN|TJK|TZA|THA|TLS|TGO|TKL|TON|TTO|TUN|TUR|TKM|TCA|TUV|VIR|UGA|UKR|ARE|GBR|UMI|USA|URY|UZB|VUT|VEN|VNM|WLF|ESH|YEM|ZMB|ZWE)$" />
 -->		</xs:restriction>
	</xs:simpleType>

	<!-- dia Type -->
	<xs:simpleType name="tipo_dia">
		<xs:restriction base="xs:integer">
			<xs:pattern value="(0[1-9]|[12]\d|3[01])" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_mes">
		<xs:restriction base="xs:integer">
			<xs:pattern value="(0?[1-9]|1[0-2])" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_anyo">
		<xs:restriction base="xs:integer">
			<xs:pattern value="[2022-2199]{4}"/>
		</xs:restriction>
	</xs:simpleType>

	<!-- hora Type -->
	<xs:simpleType name="tipo_hora">
		<xs:restriction base="xs:integer">
			<xs:pattern value="([0-1]?[0-9]|2[0-3])" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_minuto">
		<xs:restriction base="xs:integer">
			<xs:pattern value="[0-5][0-9]" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_segundo">
		<xs:restriction base="xs:integer">
			<xs:pattern value="[00-59]{2}" />
		</xs:restriction>
	</xs:simpleType>

	<!-- correo Type -->
	<xs:simpleType name="tipo_EntradaoSalida">
		<xs:restriction base="xs:string">
			<xs:pattern value="Entrada|Salida" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_email">
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,64}" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_texto_libre">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="255" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_extension-adjunto">
		<xs:restriction base="xs:string">
			<xs:pattern value=".xml|.xsd|.jpg|.png|.pdf|.pps|.gif" />
		</xs:restriction>
	</xs:simpleType>

	<!-- Contacto Type -->
	<xs:simpleType name="tipo_idioma">
		<xs:restriction base="xs:string">
			<xs:enumeration value="es" />
			<xs:enumeration value="en" />
			<xs:enumeration value="fr" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_empresaSiNo">
		<xs:restriction base="xs:string">
			<xs:enumeration value="si" />
			<xs:enumeration value="no" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tipo_telefono">
		<xs:restriction base="xs:string">
			<xs:pattern value="\(?\+[0-9]{1,3}\)? ?-?[0-9]{1,3} ?-?[0-9]{3,5} ?-?[0-9]{4}( ?-?[0-9]{3})? ?(\w{1,10}\s?\d{1,6})?" />
			<!-- Otro (propio): ^[+]{1}[1-9]{1}\d{6,} -->
		</xs:restriction>
	</xs:simpleType>


</xs:schema>


Let regex;

/* shorthand character classes */
regex = /d/; // matches any digit, short for [0-9]
regex = /D/; // matches non-digits, short for [^0-9]
regex = /S/; // matches non-white space character
regex = /s/; // matches any white space character
regex = /w/; // matches character, short for [a-zA-Z_0-9]
regex = /W/; // matches non-word character [^w]
regex = /b/; // Matches a word boundary where a word character is [a-zA-Z0-9_]
These meta characters boast a pre-defined meaning and make various typical patterns easier to use.

/* matching using quantifiers */
regex= /X./; // matches any character
regex= /X*/; // Matches zero or several repetitions of letter X, is short for {0,}
regex= /X+-/; // matches one or more repetitions of letter X, is short for {1,}
regex= /X?/; // finds no or exactly one letter X, is short for is short for {0,1}.
regex= // d{3}; // matches three digits. {} describes the order of the preceding liberal
regex= // d{1,4} ; // means d must occur at least once and at a maximum of four
A quantifies helps developers to define how often an element occurs.

/* character ranges */
regex = /[a-z]/; // matches all lowercase letters
regex = /[A-Z]/; // matches all uppercase letters
regex = /[e-l]/; // matches lowercase letters e to l (inclusive)
regex = /[F-P]/; // matches all uppercase letters F to P (inclusive)
regex = /[0-9]/; // matches all digits
regex = /[5-9]/; // matches any digit from 5 to 9 (inclusive)
regex = / [a-d1-7]/; // matches a letter between a and d and figures from 1 to 7, but not d1
regex = /[a-zA-Z]/; // matches all lowercase and uppercase letters
regex = /[^a-zA-Z]/; // matches non-letters

/* matching using anchors */
regex = / ^The/; // matches any string that starts with “The”
regex = / end$/; // matches a string that ends with end
regex = / ^The end$/; // exact string match starting with “The” and ending with “End”

/* escape characters */
regex = / a/; // match a bell or alarm
regex = / e/; // matches an escape
regex = / f/; // matches a form feed
regex = / n/; // matches a new line
regex = / Q…E/; // ingnores any special meanings in what is being matched
regex = / r/; // matches a carriage return
regex = / v/; // matches a vertical tab
It is critical to note that escape characters are case sensitive

/* matching using flags */
regex = / i/; // ignores the case in pattern ( upper and lower case allowed)
regex = / m/; // multi-line match
regex = / s/; // match new lines
regex = / x/; // allow spaces and comments
regex = / j/; // duplicate group names allowed
regex = / U/; // ungreedy match
Besides the regular expressions, flags can also be used to help developers with pattern matching.

/* matching a specific string */
regex = /sing/; // looks for the string between the forward slashes 9case-sensitive)… matches “sing”, “sing123”
regex = /sing/i; // looks for the string between the forward slashes (case-insensitive)... matches "sing", "SinNG", "123SinNG"
regex = /hello/g; // looks for multiple occurrences of string between the forward slashes...

/* groups */
regex = /it is (sizzling )?hot outside/; // matches "it is sizzling hot outside" and "it is hot outside"
regex = /it is (?:sizzling )?hot outside/; // same as above except it is a non-capturing group
regex = /do (dogs) like pizza 1/; // matches "do dogs like pizza dogs"
regex = /do (dogs) like (pizza)? do 2 1 like you?/; // matches "do dogs like pizza? do pizza dogs like you?"

/* look-ahead and look-behind */
regex = /d(?=r)/; // matches 'd' only if it is followed by 'r', but 'r' will not be part of the overall regex match
regex = / (?<=r)d /; // matches 'd' only if it is proceeded by an 'r', but 'r' will not be part of the overall regex match